require('buffer').INSPECT_MAX_BYTES = Infinity;

var ber = require('asn1').Ber;

var got = [
    new Buffer([0xa1, 0x81, 0xad, 0x02, 0x02, 0x00, 0x9d, 0x02, 0x01, 0x15, 0x30, 0x81, 0xa3, 0x55, 0x02, 0x00, 0x00, 0xa0, 0x81, 0x9c, 0xa4, 0x81, 0x99, 0x6b, 0x0f, 0x30, 0x0d, 0x80, 0x02, 0x85, 0xf4, 0xa1, 0x07, 0x30, 0x05, 0x80, 0x03, 0x35, 0x34, 0x38, 0x63, 0x07, 0x30, 0x05, 0x80, 0x03, 0x35, 0x34, 0x38, 0x61, 0x10, 0x30, 0x0e, 0x80, 0x0c, 0x30, 0x31, 0x37, 0x36, 0x36, 0x32, 0x37, 0x35, 0x34, 0x39, 0x34, 0x39, 0x62, 0x07, 0x30, 0x05, 0x80, 0x03, 0x35, 0x34, 0x38, 0x64, 0x02, 0x87, 0x00, 0x6b, 0x10, 0x30, 0x0e, 0x80, 0x02, 0x85, 0xf4, 0xa1, 0x08, 0x30, 0x06, 0x80, 0x04, 0x39, 0x37, 0x33, 0x31, 0x4e, 0x01, 0x02, 0x0a, 0x01, 0x16, 0x65, 0x08, 0x30, 0x06, 0x80, 0x04, 0x39, 0x37, 0x33, 0x31, 0xa5, 0x28, 0x30, 0x12, 0x81, 0x10, 0x05, 0x2d, 0x2f, 0x1a, 0x16, 0x03, 0x47, 0x88, 0x01, 0x00, 0x80, 0x00, 0x00, 0x00, 0x85, 0xf4, 0x30, 0x12, 0x81, 0x10, 0x05, 0x2d, 0x2f, 0x1a, 0x16, 0x03, 0x47, 0x88, 0x01, 0x00, 0x80, 0x00, 0x00, 0x00, 0x85, 0xf4, 0x7e, 0x12, 0xa0, 0x10, 0x18, 0x0e, 0x32, 0x30, 0x31, 0x32, 0x31, 0x32, 0x30, 0x37, 0x31, 0x39, 0x33, 0x34, 0x30, 0x31]),
    new Buffer([0xa1, 0x81, 0xad, 0x02, 0x02, 0x00, 0xa8, 0x02, 0x01, 0x15, 0x30, 0x81, 0xa3, 0x55, 0x02, 0x00, 0x00, 0xa0, 0x81, 0x9c, 0xa4, 0x81, 0x99, 0x6b, 0x0f, 0x30, 0x0d, 0x80, 0x02, 0x88, 0x4e, 0xa1, 0x07, 0x30, 0x05, 0x80, 0x03, 0x35, 0x34, 0x38, 0x63, 0x07, 0x30, 0x05, 0x80, 0x03, 0x35, 0x34, 0x38, 0x61, 0x10, 0x30, 0x0e, 0x80, 0x0c, 0x30, 0x31, 0x37, 0x36, 0x36, 0x32, 0x37, 0x35, 0x34, 0x39, 0x34, 0x39, 0x62, 0x07, 0x30, 0x05, 0x80, 0x03, 0x35, 0x34, 0x38, 0x64, 0x02, 0x87, 0x00, 0x6b, 0x10, 0x30, 0x0e, 0x80, 0x02, 0x88, 0x4e, 0xa1, 0x08, 0x30, 0x06, 0x80, 0x04, 0x39, 0x37, 0x33, 0x32, 0x4e, 0x01, 0x02, 0x0a, 0x01, 0x16, 0x65, 0x08, 0x30, 0x06, 0x80, 0x04, 0x39, 0x37, 0x33, 0x32, 0xa5, 0x28, 0x30, 0x12, 0x81, 0x10, 0x05, 0xb9, 0x33, 0x42, 0x42, 0xc3, 0x47, 0x88, 0x01, 0x00, 0x80, 0x00, 0x00, 0x00, 0x88, 0x4e, 0x30, 0x12, 0x81, 0x10, 0x05, 0xb9, 0x33, 0x42, 0x42, 0xc3, 0x47, 0x88, 0x01, 0x00, 0x80, 0x00, 0x00, 0x00, 0x88, 0x4e, 0x7e, 0x12, 0xa0, 0x10, 0x18, 0x0e, 0x32, 0x30, 0x31, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x30, 0x33, 0x39, 0x32, 0x34]),
    new Buffer([0xa1, 0x81, 0x99, 0x02, 0x02, 0x00, 0xab, 0x02, 0x01, 0x15, 0x30, 0x81, 0x8f, 0x55, 0x02, 0x00, 0x00, 0xa0, 0x81, 0x88, 0xa4, 0x81, 0x85, 0x6b, 0x0f, 0x30, 0x0d, 0x80, 0x02, 0x88, 0x6b, 0xa1, 0x07, 0x30, 0x05, 0x80, 0x03, 0x35, 0x34, 0x38, 0x63, 0x07, 0x30, 0x05, 0x80, 0x03, 0x35, 0x34, 0x38, 0x61, 0x07, 0x30, 0x05, 0x80, 0x03, 0x35, 0x33, 0x31, 0x62, 0x07, 0x30, 0x05, 0x80, 0x03, 0x35, 0x34, 0x38, 0x64, 0x02, 0x87, 0x00, 0x6b, 0x0f, 0x30, 0x0d, 0x80, 0x02, 0x88, 0x6b, 0xa1, 0x07, 0x30, 0x05, 0x80, 0x03, 0x35, 0x33, 0x31, 0x4e, 0x01, 0x02, 0x0a, 0x01, 0x16, 0xa5, 0x28, 0x30, 0x12, 0x81, 0x10, 0x01, 0x3e, 0xc5, 0xc3, 0x22, 0xc3, 0x47, 0x88, 0x01, 0x00, 0x80, 0x00, 0x00, 0x00, 0x88, 0x6b, 0x30, 0x12, 0x81, 0x10, 0x01, 0x3e, 0xc5, 0xc3, 0x22, 0xc3, 0x47, 0x88, 0x01, 0x00, 0x80, 0x00, 0x00, 0x00, 0x88, 0x6b, 0x7e, 0x12, 0xa0, 0x10, 0x18, 0x0e, 0x32, 0x30, 0x31, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x30, 0x35, 0x37, 0x31, 0x39]),

    new Buffer([0xa1, 0x0c, 0x02, 0x01, 0x01, 0x02, 0x02, 0x00, 0xd3, 0x30, 0x03, 0x0a, 0x01, 0x02]),
    new Buffer([0xa1, 0x34, 0x02, 0x02, 0x00, 0xbd, 0x02, 0x01, 0x15, 0x30, 0x2b, 0x55, 0x02, 0x00, 0x00, 0xa3, 0x25, 0xa3, 0x23, 0x63, 0x07, 0x30, 0x05, 0x80, 0x03, 0x35, 0x34, 0x38, 0x04, 0x01, 0x01, 0x01, 0x01, 0x00, 0x7e, 0x12, 0xa0, 0x10, 0x18, 0x0e, 0x32, 0x30, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x34, 0x31, 0x38, 0x35, 0x32]),
    new Buffer([0xa1, 0x34, 0x02, 0x02, 0x00, 0xbf, 0x02, 0x01, 0x15, 0x30, 0x2b, 0x55, 0x02, 0x00, 0x00, 0xa3, 0x25, 0xa3, 0x23, 0x63, 0x07, 0x30, 0x05, 0x80, 0x03, 0x35, 0x34, 0x38, 0x04, 0x01, 0x01, 0x01, 0x01, 0xff, 0x7e, 0x12, 0xa0, 0x10, 0x18, 0x0e, 0x32, 0x30, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x34, 0x31, 0x38, 0x35, 0x33])
];

for (var i in got) {
    console.info("--");
    try {
        parse(got[i]);
    } catch (e) {
        console.error(e);
    }
}

function parse(got) {
    var reader = new ber.Reader(got);
    var seq = reader.readSequence();

    switch (seq) {
        case 0xa1:
            var invokeId = reader.readInt();                                            log('invokeId', invokeId);
            var oparationValue = reader.readInt();                                      log('oparationValue', oparationValue);
            seq = reader.readSequence(0x30);
                seq = reader.peek();

                switch (seq) {
                    case 0x0a:
                        seq = reader.readString(seq);
                        // should be 0x01 0x02 ???
                        // TODO put second auth command ..
                        // sendRorsApdu
                        break;

                    case 0x55:
                        seq = reader.readString(seq);
                        seq = reader.readSequence();

                        switch (seq) {
                            case 0xa3:
                                seq = reader.readSequence(0xa3);
                                    seq = reader.readSequence(0x63);
                                        seq = reader.readSequence(0x30);
                                            var dialingNumber = reader.readString(0x80);            log('dialingNumber', dialingNumber);
                                    var text = reader.readString(0x04, true);                       log('text', text);
                                    var bool = reader.readBoolean();                                console.info('bool', bool);
                                    seq = reader.readSequence(0x7e);
                                        seq = reader.readSequence(0xa0);
                                            var timestamp = reader.readString(0x18, true);          log('timestamp', timestamp);
                                break;

                            case 0xa0:
                                seq = reader.readSequence();

                                switch (seq) {
                                    case 0xa3:
                                    case 0xb0:
                                    case 0xa4:
                                        var x = 0;
                                        while (reader.remain > 0) {
                                            seq = reader.peek();

                                            switch (seq) {
                                                case 0x6b:
                                                    seq = reader.readSequence();
                                                        seq = reader.readSequence(0x30);
                                                            var callId = reader.readString(0x80, true);             log('callId', callId);
                                                            seq = reader.readSequence(0xa1);
                                                                seq = reader.readSequence(0x30);
                                                                    var dialingNumber = reader.readString(0x80);    log('dialingNumber1', dialingNumber);
                                                    break;

                                                case 0x61:
                                                case 0x62:
                                                case 0x63:
                                                    seq = reader.readSequence();
                                                        seq = reader.readSequence(0x30);
                                                            var dialingNumber = reader.readString(0x80);            log('dialingNumber2', dialingNumber);
                                                    break;

                                                case 0x64:
                                                    seq = reader.readString(seq, true);
                                                    break;

                                                case 0x4e:
                                                    var localConnectionInfo = reader.readString(seq, true);        log('localConnectionInfo', localConnectionInfo);
                                                    break;

                                                case 0x0a:
                                                    var cause = reader.readString(seq, true);                      log('cause', cause);
                                                    break;

                                                case 0x65:
                                                    seq = reader.readSequence();
                                                        seq = reader.readSequence(0x30);
                                                            var unknown = reader.readString(0x80, true);            log('unknown', unknown);

                                                    break;

                                                case 0xa5:
                                                case 0xa6:
                                                    seq = reader.readSequence();
                                                        seq = reader.readSequence(0x30);
                                                            var unknown = reader.readString(0x81, true);            log('unknown', unknown);
                                                        seq = reader.readSequence(0x30);
                                                            var unknown = reader.readString(0x81, true);            log('unknown', unknown);

                                                    break;

                                                case 0x7e:
                                                    seq = reader.readSequence();
                                                        seq = reader.readSequence(0xa0);
                                                            var timestamp = reader.readString(0x18, true);          log('timestamp', timestamp);

                                                    break;

                                            }
                                        }
                                }
                                break;
                        }
                    break;
                }
            break;

        default:
            log('unknow seq', seq);
            break;
    }
}

function log(pref, data) {
    var hex = '', i, part;

    if (data === undefined) {
        data = [''];
    }

    if (data.slice === undefined) {
        data = [data];
    }

    for (i = 0; i < data.length; ++i) {
        part = data[i].toString(16);

        if (part.length === 1) {
            part = '0' + part;
        }

        hex += ' 0x' + part;
    }

    console.info(pref, hex);
}
